/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.content.targeting.analytics.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

/**
 * The base model interface for the AnalyticsReferrer service. Represents a row in the &quot;CT_Analytics_AnalyticsReferrer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.content.targeting.analytics.model.impl.AnalyticsReferrerModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.content.targeting.analytics.model.impl.AnalyticsReferrerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AnalyticsReferrer
 * @see com.liferay.content.targeting.analytics.model.impl.AnalyticsReferrerImpl
 * @see com.liferay.content.targeting.analytics.model.impl.AnalyticsReferrerModelImpl
 * @generated
 */
public interface AnalyticsReferrerModel extends BaseModel<AnalyticsReferrer> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a analytics referrer model instance should use the {@link AnalyticsReferrer} interface instead.
	 */

	/**
	 * Returns the primary key of this analytics referrer.
	 *
	 * @return the primary key of this analytics referrer
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this analytics referrer.
	 *
	 * @param primaryKey the primary key of this analytics referrer
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the analytics referrer ID of this analytics referrer.
	 *
	 * @return the analytics referrer ID of this analytics referrer
	 */
	public long getAnalyticsReferrerId();

	/**
	 * Sets the analytics referrer ID of this analytics referrer.
	 *
	 * @param analyticsReferrerId the analytics referrer ID of this analytics referrer
	 */
	public void setAnalyticsReferrerId(long analyticsReferrerId);

	/**
	 * Returns the analytics event ID of this analytics referrer.
	 *
	 * @return the analytics event ID of this analytics referrer
	 */
	public long getAnalyticsEventId();

	/**
	 * Sets the analytics event ID of this analytics referrer.
	 *
	 * @param analyticsEventId the analytics event ID of this analytics referrer
	 */
	public void setAnalyticsEventId(long analyticsEventId);

	/**
	 * Returns the referrer class name of this analytics referrer.
	 *
	 * @return the referrer class name of this analytics referrer
	 */
	@AutoEscape
	public String getReferrerClassName();

	/**
	 * Sets the referrer class name of this analytics referrer.
	 *
	 * @param referrerClassName the referrer class name of this analytics referrer
	 */
	public void setReferrerClassName(String referrerClassName);

	/**
	 * Returns the referrer class p k of this analytics referrer.
	 *
	 * @return the referrer class p k of this analytics referrer
	 */
	public long getReferrerClassPK();

	/**
	 * Sets the referrer class p k of this analytics referrer.
	 *
	 * @param referrerClassPK the referrer class p k of this analytics referrer
	 */
	public void setReferrerClassPK(long referrerClassPK);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		com.liferay.content.targeting.analytics.model.AnalyticsReferrer analyticsReferrer);

	@Override
	public int hashCode();

	@Override
	public CacheModel<com.liferay.content.targeting.analytics.model.AnalyticsReferrer> toCacheModel();

	@Override
	public com.liferay.content.targeting.analytics.model.AnalyticsReferrer toEscapedModel();

	@Override
	public com.liferay.content.targeting.analytics.model.AnalyticsReferrer toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}